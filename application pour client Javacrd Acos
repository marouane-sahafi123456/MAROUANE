package ClientAppPack;

import java.io.*;
import java.net.Socket;

import com.sun.javacard.apduio.Apdu;
import com.sun.javacard.apduio.CadT1Client;
import com.sun.javacard.apduio.CadTransportException;



public class ClientApp {
	
	final static byte[] FILE_SFI = {(byte) 0xA0, (byte) 0xA0};
    private boolean file_selected = false;

    private final static byte CLA = (byte) 0x80;

    // ##################### Séléctionner mon fichier #################
    private final static byte INS_SELECT_FILE = (byte) 0xA4;
    // ##################### Ecrire dans mon fichier #################
    private final static byte INS_WRITE_FILE = (byte) 0x00;
    // ##################### Lire mon fichier #################
    private final static byte INS_READ_FILE = (byte) 0x01;
    // ##################### Submit PIN code #################
    private final static byte INS_SUBMIT_PIN = (byte) 0x02;
    // ##################### Changer le code PIN #################
    private final static byte INS_CHANGE_PIN = (byte) 0x03;
    // ##################### Débloquer le code PIN #################
    private final static byte INS_UNBLOCK_PIN = (byte) 0x04;
    // ##################### Submit IC code #################
    private final static byte INS_SUBMIT_IC = (byte) 0x05;  
    // ##################### Change IC code #################
    private final static byte INS_CHANGE_IC = (byte) 0x06;  

    private final static byte[] PASS1 = {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
    private final static byte[] PASS2 ={(byte) 0xA0, (byte) 0xB0, (byte) 0xC0, (byte) 0xD0};

	private static CadT1Client cad = null;
	private static Socket socketCarte;
	
	public static void main(String[] args) throws IOException, CadTransportException {
		
		connectToApplet();
		
		selectApplet();
		
		submitIC(PASS2);
		submitPIN(PASS1);
		
		selectFile(FILE_SFI);
		
		byte[] content = {'h', 'e', 'l', 'l', 'o', ' ', 'C', 'S', 'E', 'E',' ','f','r', 'o', 'm', ' ', 'S', 'O', 'H', 'A', 'I','B'};
		writeContent(content);
		
		readContent((byte)0, (byte)22);
		
		deselectApplet();
		
		
		System.out.println("Résultat bien reçu Merci!");
	}
	
	public static void connectToApplet()
	{
		try{
			socketCarte = new Socket("localhost", 9025);
			socketCarte.setTcpNoDelay(true);
			BufferedInputStream input = new BufferedInputStream(socketCarte.getInputStream());
			BufferedOutputStream output = new BufferedOutputStream(socketCarte.getOutputStream());
			
			cad = new CadT1Client(input, output);
			
		}catch(Exception e){
			System.out.println("Erreur à la connexion "+ e);
			return;
		}
		
		/*    PowerUp   */
		try {
			cad.powerUp();
		} catch (Exception e) {
			System.out.println("Erreur au powerUp "+ e);
			return;
		}
	}
	
	public static void selectApplet() throws IOException, CadTransportException
	{
		Apdu apdu = new Apdu();
		apdu.command[Apdu.CLA] = (byte)0x00;
		apdu.command[Apdu.INS] = (byte)0xA4;
		apdu.command[Apdu.P1] = (byte)0x04;
		apdu.command[Apdu.P2] = (byte)0x00;

		byte[] aid = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00};
		
		apdu.setDataIn(aid);
		cad.exchangeApdu(apdu);
		
		if (apdu.getStatus() != 0x9000) {
			System.out.println("Erreur lors de la sélection de l'applet   -    Erreur: " + Integer.toHexString(apdu.getStatus()));
			System.exit(1);
		}
	}
	
	public static void deselectApplet(){
		try {
			cad.powerDown();
		} catch (Exception e) {
			System.out.println("Erreur lors de l'envoi de la commande Powerdown a la Carte");
			return;
		}
	}
	
	static void submitIC(byte[] iccode) throws IOException, CadTransportException
	{
		Apdu apdu = new Apdu();
		apdu.command[Apdu.CLA] = CLA;
		apdu.command[Apdu.INS] = INS_SUBMIT_IC;
		apdu.command[Apdu.P1] = (byte)0x00;
		apdu.command[Apdu.P2] = (byte)0x00;
		apdu.setDataIn(iccode);
		cad.exchangeApdu(apdu);
		
		if(apdu.getStatus() != 0x9000)
			System.out.println("Erreur lors de l'envoir du IC code.   SW= "+Integer.toHexString(apdu.getStatus()));
	}
	
	static void submitPIN(byte[] pincode) throws IOException, CadTransportException
	{
		Apdu apdu = new Apdu();
		apdu.command[Apdu.CLA] = CLA;
		apdu.command[Apdu.INS] = INS_SUBMIT_PIN;
		apdu.command[Apdu.P1] = (byte)0x00;
		apdu.command[Apdu.P2] = (byte)0x00;
		apdu.setDataIn(pincode);
		cad.exchangeApdu(apdu);
		
		if(apdu.getStatus() != 0x9000)
			System.out.println("Erreur lors de l'envoir du PIN code.  SW= "+Integer.toHexString(apdu.getStatus()));
	}
	
	
	static void selectFile(byte[] fileid) throws IOException, CadTransportException
	{
		Apdu apdu = new Apdu();
		apdu.command[Apdu.CLA] = CLA;
		apdu.command[Apdu.INS] = INS_SELECT_FILE;
		apdu.command[Apdu.P1] = (byte)0x00;
		apdu.command[Apdu.P2] = (byte)0x00;
		apdu.setDataIn(fileid);
		cad.exchangeApdu(apdu);
		
		if(apdu.getStatus() != 0x9000)
			System.out.println("Erreur lors de l'envoir du PIN code.  SW= "+Integer.toHexString(apdu.getStatus()));
		
	}
	
	static void writeContent(byte[] content) throws IOException, CadTransportException
	{
		Apdu apdu = new Apdu();
		apdu.command[Apdu.CLA] = CLA;
		apdu.command[Apdu.INS] = INS_WRITE_FILE;
		apdu.command[Apdu.P1] = (byte)0x00;
		apdu.command[Apdu.P2] = (byte)0x00;
		apdu.setDataIn(content);
		cad.exchangeApdu(apdu);
		
		if(apdu.getStatus() != 0x9000)
			System.out.println("Erreur lors l'ecriture dan le fichier.  SW= "+Integer.toHexString(apdu.getStatus()));
	
	}
	
	static void readContent(byte offset, byte len) throws IOException, CadTransportException
	{
		Apdu apdu = new Apdu();
		apdu.command[Apdu.CLA] = CLA;
		apdu.command[Apdu.INS] = INS_READ_FILE;
		apdu.command[Apdu.P1] = offset;
		apdu.command[Apdu.P2] = len;  
		
		cad.exchangeApdu(apdu);
		
		if(apdu.getStatus() != 0x9000)
			System.out.println("Erreur lors de la lecture du fichier.  SW= "+Integer.toHexString(apdu.getStatus()));
		else
		{
			byte[] arr = apdu.getDataOut();
			System.out.println("Reading "+ len +" bytes, beginning from "+ offset + "  :");
			for (int i = 0; i < arr.length; i++) {
				
				System.out.print((char)arr[i] + "  " );
			}
		}
	}
	
	

}

